name: Release Charts

on:
  push:
    branches:
      - chore/signed-release-test

env:
  tag_prefix: v
  crds_tag_prefix: crds_v

permissions:
  contents: write
  packages: write
  # This is used to create the OIDC token for signing the Helm chart
  id-token: write

jobs:
  traefik:
    needs: [ traefik-crds ]
    runs-on: ubuntu-latest
    outputs:
      CHART_VERSION: ${{ steps.chart_version.outputs.CHART_VERSION }}
      TAG_EXISTS: ${{ steps.tag_exists.outputs.TAG_EXISTS }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global --add safe.directory /charts

      - name: Copy LICENSE, EXAMPLES.md and README.md for packaging
        run: |
          cp ./README.md ./traefik/README.md
          cp ./EXAMPLES.md ./traefik/EXAMPLES.md
          cp ./LICENSE ./traefik/LICENSE

      - name: Generate default static install
        run: |
          kustomize build traefik-crds > traefik.yaml
          helm template traefik ./traefik -n traefik >> traefik.yaml

      - name: Get chart version
        id: chart_version
        run: |
          echo "CHART_VERSION=$(cat traefik/Chart.yaml | awk -F"[ ',]+" '/version:/{print $2}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_exists
        run: |
          TAG_EXISTS=false
          if git tag -l | grep '^${{ env.tag_prefix }}${{ steps.chart_version.outputs.CHART_VERSION }}$' > /dev/null ; then
              TAG_EXISTS=true
          fi
          echo TAG_EXISTS=$TAG_EXISTS >> $GITHUB_OUTPUT

      - name: Get Previous tag
        id: previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          prefix: v
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Tag release
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.chart_version.outputs.CHART_VERSION }}
          tag_prefix: ${{ env.tag_prefix }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Render changelog configuration
        env:
          REGEXP: '(\\(.+\\)|(?!\\(CRDs-.+\\)))'
        run: |
          export DATE=$(date +%F); cat .github/workflows/changelog.json | envsubst > /tmp/changelog.json; cat /tmp/changelog.json
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          fromTag: ${{ steps.previous_tag.outputs.tag }}
          toTag: ${{ steps.tag_version.outputs.new_tag }}
          configuration: "/tmp/changelog.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ contains(steps.chart_version.outputs.CHART_VERSION, '-') }}
          artifacts: "traefik.yaml"
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # avoid to push both charts
      - name: Delete traefik-crds chart
        run: |
          rm -rf traefik-crds
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # - name: Prepare GPG key for signing
      #   run: |
      #     gpg_dir=.cr-gpg
      #     mkdir "$gpg_dir"
      #     keyring="$gpg_dir/secring.gpg"
      #     echo "${{ secrets.GPG_KEYRING_BASE64 }}" | base64 -d > "$keyring"
      #     passphrase_file="$gpg_dir/passphrase"
      #     echo "${{ secrets.GPG_PASSPHRASE }}" > "$passphrase_file"
      #     echo "CR_PASSPHRASE_FILE=$passphrase_file" >> "$GITHUB_ENV"
      #     echo "CR_KEYRING=$keyring" >> "$GITHUB_ENV"
      #   if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # - name: Publish Helm chart
      #   uses: helm/chart-releaser-action@v1.7.0
      #   with:
      #     charts_dir: .
      #   env:
      #     CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CR_KEY: traefik-helm-sign-test
      #     CR_SIGN: true
      #   if: steps.tag_exists.outputs.TAG_EXISTS == 'false'







      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }} # Private key of the GPG key
          passphrase: ${{ secrets.GPG_PASSPHRASE }} # Passphrase for the key, if required
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # Helm requires the legacy GPG format
      # @link https://helm.sh/docs/topics/provenance/#the-workflow
      - name: Convert GPG v2 key
        run: |
          gpg --export > ~/.gnupg/pubring.gpg
          gpg --batch --pinentry-mode loopback --yes --passphrase '${{ secrets.GPG_PASSPHRASE }}' --export-secret-key > ~/.gnupg/secring.gpg
      - name: Chart | Push and sign
        uses: appany/helm-oci-chart-releaser@v0.5.0
        with:
          name: traefik
          repository: bpsoraggi/helm
          tag: ${{ steps.chart_version.outputs.CHART_VERSION }}
          path: ./traefik
          registry: ghcr.io
          registry_username: bpsoraggi
          registry_password: ${{ secrets.GHCR_TOKEN }}
          sign: true
          signing_key: ${{ steps.gpg.outputs.name }}
          signing_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          update_dependencies: 'true' # Defaults to false
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # helm pull ghcr.io/appany/my-chart:0.1.0




      # - name: Login to GitHub Container Registry
      #   run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
 
      # - name: Publish Helm chart to the ghcr.io registry
      #   uses: appany/helm-oci-chart-releaser@v0.4.2
      #   with:
      #     name: traefik
      #     repository: bpsoraggi/helm
      #     tag: ${{ steps.chart_version.outputs.CHART_VERSION }}
      #     path: ./traefik
      #     registry: ghcr.io
      #     registry_username: bpsoraggi
      #     registry_password: ${{ secrets.GHCR_TOKEN }}
      #   if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # - name: Install Cosign
      #   uses: sigstore/cosign-installer@v3.9.1

      # - name: Sign Helm chart
      #   run: |
      #     cosign sign --yes \
      #       -a version="${{ steps.chart_version.outputs.CHART_VERSION }}" \
      #       -a commitSha="$GITHUB_SHA" \
      #       -a buildDate="$(date +%F)" \
      #       ghcr.io/bpsoraggi/helm/traefik:${{ steps.chart_version.outputs.CHART_VERSION }}

  traefik-crds:
    runs-on: ubuntu-latest
    outputs:
      CHART_VERSION: ${{ steps.chart_version.outputs.CHART_VERSION }}
      TAG_EXISTS: ${{ steps.tag_exists.outputs.TAG_EXISTS }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global --add safe.directory /charts

      - name: Copy LICENSE for packaging
        run: |
          cp ./LICENSE ./traefik/LICENSE

      - name: Get chart version
        id: chart_version
        run: |
          echo "CHART_VERSION=$(cat traefik-crds/Chart.yaml | awk -F"[ ',]+" '/version:/{print $2}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_exists
        run: |
          TAG_EXISTS=false
          if git tag -l | grep '^${{ env.crds_tag_prefix }}${{ steps.chart_version.outputs.CHART_VERSION }}$' > /dev/null ; then
              TAG_EXISTS=true
          fi
          echo TAG_EXISTS=$TAG_EXISTS >> $GITHUB_OUTPUT

      - name: Get Previous tag
        id: previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          prefix: crds_v
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Tag release
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.chart_version.outputs.CHART_VERSION }}
          tag_prefix: ${{ env.crds_tag_prefix }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Render changelog configuration
        env:
          REGEXP: '\\((CRDs|CRDs-.+)\\)'
        run: |
          export DATE=$(date +%F); cat .github/workflows/changelog.json | envsubst > /tmp/changelog.json; cat /tmp/changelog.json
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          fromTag: ${{ steps.previous_tag.outputs.tag }}
          toTag: ${{ steps.tag_version.outputs.new_tag }}
          configuration: "/tmp/changelog.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ contains(steps.chart_version.outputs.CHART_VERSION, '-') }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      # avoid to push both charts
      - name: Delete traefik chart
        run: |
          rm -rf traefik
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.CHARTS_TOKEN }}
          charts_dir: .
          charts_url: https://bpsoraggi.github.io/charts
          owner: bpsoraggi
          repository: charts
          branch: main
          target_dir: traefik-crds
          index_dir: .
          commit_username: bpsoraggi
          commit_email: ${{ secrets.GH_EMAIL }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

      - name: Publish Helm chart to the ghcr.io registry
        uses: appany/helm-oci-chart-releaser@v0.4.2
        with:
          name: traefik-crds
          repository: bpsoraggi/helm
          tag: ${{ steps.chart_version.outputs.CHART_VERSION }}
          path: ./traefik-crds
          registry: ghcr.io
          registry_username: bpsoraggi
          registry_password: ${{ secrets.GHCR_TOKEN }}
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'

  sign-traefik-crds:
    needs: [ traefik-crds ]
    runs-on: ubuntu-latest
    if: needs.traefik-crds.outputs.TAG_EXISTS == 'false'
    permissions:
      contents: read
      # This is used to create the OIDC token for signing the Helm chart
      id-token: write
    steps:

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1

      - name: Sign Helm chart
        run: |
          cosign sign --yes \
            -a version="${{ needs.traefik-crds.outputs.CHART_VERSION }}" \
            -a commitSha="$GITHUB_SHA" \
            -a buildDate="$(date +%F)" \
            ghcr.io/bpsoraggi/helm/traefik-crds:${{ needs.traefik-crds.outputs.CHART_VERSION }}
